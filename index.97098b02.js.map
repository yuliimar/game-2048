{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState){\n        this.state = initialState || this.getEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    getEmptyBoard() {\n        return Array(4).fill(null).map(()=>Array(4).fill(0));\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state.map((row)=>[\n                ...row\n            ]);\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        if (this.status === \"idle\") {\n            this.status = \"playing\";\n            this.addRandomTile();\n            this.addRandomTile();\n        }\n    }\n    restart() {\n        this.state = this.getEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        this.state.forEach((row, y)=>{\n            row.forEach((cell, x)=>{\n                if (cell === 0) emptyCells.push({\n                    y: y,\n                    x: x\n                });\n            });\n        });\n        if (emptyCells.length > 0) {\n            const { y: y, x: x } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.state[y][x] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return false;\n        let moved = false;\n        const newState = this.state.map((row)=>{\n            let nonZero = row.filter((cell)=>cell !== 0);\n            for(let i = 0; i < nonZero.length - 1; i++)if (nonZero[i] === nonZero[i + 1]) {\n                nonZero[i] *= 2;\n                this.score += nonZero[i];\n                nonZero[i + 1] = 0;\n            }\n            nonZero = nonZero.filter((cell)=>cell !== 0);\n            while(nonZero.length < 4)nonZero.push(0);\n            return nonZero;\n        });\n        const hasChanged = JSON.stringify(this.state) !== JSON.stringify(newState);\n        if (hasChanged) {\n            this.state = newState;\n            this.addRandomTile();\n            moved = true;\n        }\n        this.checkGameStatus();\n        return moved;\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return false;\n        let moved = false;\n        const newState = this.state.map((row)=>{\n            let nonZero = row.filter((cell)=>cell !== 0).reverse();\n            for(let i = 0; i < nonZero.length - 1; i++)if (nonZero[i] === nonZero[i + 1]) {\n                nonZero[i] *= 2;\n                this.score += nonZero[i];\n                nonZero[i + 1] = 0;\n            }\n            nonZero = nonZero.filter((cell)=>cell !== 0);\n            while(nonZero.length < 4)nonZero.push(0);\n            return nonZero.reverse();\n        });\n        const hasChanged = JSON.stringify(this.state) !== JSON.stringify(newState);\n        if (hasChanged) {\n            this.state = newState;\n            this.addRandomTile();\n            moved = true;\n        }\n        this.checkGameStatus();\n        return moved;\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return false;\n        let moved = false;\n        const newState = this.getEmptyBoard();\n        for(let col = 0; col < 4; col++){\n            let column = [];\n            for(let row = 0; row < 4; row++)if (this.state[row][col] !== 0) column.push(this.state[row][col]);\n            for(let i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                column[i] *= 2;\n                this.score += column[i];\n                column[i + 1] = 0;\n            }\n            column = column.filter((cell)=>cell !== 0);\n            while(column.length < 4)column.push(0);\n            for(let row = 0; row < 4; row++)newState[row][col] = column[row];\n        }\n        const hasChanged = JSON.stringify(this.state) !== JSON.stringify(newState);\n        if (hasChanged) {\n            this.state = newState;\n            this.addRandomTile();\n            moved = true;\n        }\n        this.checkGameStatus();\n        return moved;\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return false;\n        let moved = false;\n        const newState = this.getEmptyBoard();\n        for(let col = 0; col < 4; col++){\n            let column = [];\n            for(let row = 3; row >= 0; row--)if (this.state[row][col] !== 0) column.push(this.state[row][col]);\n            for(let i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                column[i] *= 2;\n                this.score += column[i];\n                column[i + 1] = 0;\n            }\n            column = column.filter((cell)=>cell !== 0);\n            while(column.length < 4)column.push(0);\n            for(let row = 0; row < 4; row++)newState[3 - row][col] = column[row];\n        }\n        const hasChanged = JSON.stringify(this.state) !== JSON.stringify(newState);\n        if (hasChanged) {\n            this.state = newState;\n            this.addRandomTile();\n            moved = true;\n        }\n        this.checkGameStatus();\n        return moved;\n    }\n    checkGameStatus() {\n        if (this.state.some((row)=>row.includes(2048))) {\n            this.status = \"win\";\n            return;\n        }\n        if (!this.hasAvailableMoves()) this.status = \"lose\";\n    }\n    hasAvailableMoves() {\n        if (this.state.some((row)=>row.includes(0))) return true;\n        for(let y = 0; y < 4; y++)for(let x = 0; x < 3; x++){\n            if (this.state[y][x] === this.state[y][x + 1]) return true;\n        }\n        for(let x = 0; x < 4; x++)for(let y = 0; y < 3; y++){\n            if (this.state[y][x] === this.state[y + 1][x]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$fieldCells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nlet $09e991522ca7e64e$var$previousState = $09e991522ca7e64e$var$game.getState();\nfunction $09e991522ca7e64e$var$updateUI() {\n    const newState = $09e991522ca7e64e$var$game.getState();\n    newState.forEach((row, y)=>{\n        row.forEach((value, x)=>{\n            const cell = $09e991522ca7e64e$var$fieldCells[y * 4 + x];\n            const prevValue = $09e991522ca7e64e$var$previousState[y][x];\n            cell.textContent = value || \"\";\n            cell.className = `field-cell${value ? ` field-cell--${value}` : \"\"}`;\n            if (value !== prevValue) {\n                cell.classList.add(\"appear\");\n                setTimeout(()=>{\n                    cell.classList.remove(\"appear\");\n                }, 150);\n            }\n        });\n    });\n    $09e991522ca7e64e$var$previousState = newState.map((row)=>[\n            ...row\n        ]);\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$messageStart.classList.toggle(\"hidden\", $09e991522ca7e64e$var$game.getStatus() !== \"idle\");\n    $09e991522ca7e64e$var$messageWin.classList.toggle(\"hidden\", $09e991522ca7e64e$var$game.getStatus() !== \"win\");\n    $09e991522ca7e64e$var$messageLose.classList.toggle(\"hidden\", $09e991522ca7e64e$var$game.getStatus() !== \"lose\");\n    $09e991522ca7e64e$var$startButton.textContent = $09e991522ca7e64e$var$game.getStatus() === \"idle\" ? \"Start\" : \"Restart\";\n    $09e991522ca7e64e$var$startButton.className = `button ${$09e991522ca7e64e$var$game.getStatus() === \"idle\" ? \"start\" : \"restart\"}`;\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") $09e991522ca7e64e$var$game.start();\n    else $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$updateUI();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$updateUI();\n});\n$09e991522ca7e64e$var$updateUI();\n\n\n//# sourceMappingURL=index.97098b02.js.map\n","'use strict';\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\nconst startButton = document.querySelector('.button.start');\nconst gameScore = document.querySelector('.game-score');\nconst fieldCells = document.querySelectorAll('.field-cell');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nlet previousState = game.getState();\n\nfunction updateUI() {\n  const newState = game.getState();\n\n  newState.forEach((row, y) => {\n    row.forEach((value, x) => {\n      const cell = fieldCells[y * 4 + x];\n      const prevValue = previousState[y][x];\n\n      cell.textContent = value || '';\n      cell.className = `field-cell${value ? ` field-cell--${value}` : ''}`;\n\n      if (value !== prevValue) {\n        cell.classList.add('appear');\n\n        setTimeout(() => {\n          cell.classList.remove('appear');\n        }, 150);\n      }\n    });\n  });\n\n  previousState = newState.map((row) => [...row]);\n\n  gameScore.textContent = game.getScore();\n  messageStart.classList.toggle('hidden', game.getStatus() !== 'idle');\n  messageWin.classList.toggle('hidden', game.getStatus() !== 'win');\n  messageLose.classList.toggle('hidden', game.getStatus() !== 'lose');\n  startButton.textContent = game.getStatus() === 'idle' ? 'Start' : 'Restart';\n  startButton.className = `button ${game.getStatus() === 'idle' ? 'start' : 'restart'}`;\n}\n\nstartButton.addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n  } else {\n    game.restart();\n  }\n  updateUI();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n  updateUI();\n});\n\nupdateUI();\n","'use strict';\nclass Game {\n  constructor(initialState) {\n    this.state = initialState || this.getEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  getEmptyBoard() {\n    return Array(4)\n      .fill(null)\n      .map(() => Array(4).fill(0));\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state.map((row) => [...row]);\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  restart() {\n    this.state = this.getEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.state.forEach((row, y) => {\n      row.forEach((cell, x) => {\n        if (cell === 0) {\n          emptyCells.push({ y, x });\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const { y, x } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.state[y][x] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    let moved = false;\n\n    const newState = this.state.map((row) => {\n      let nonZero = row.filter((cell) => cell !== 0);\n\n      for (let i = 0; i < nonZero.length - 1; i++) {\n        if (nonZero[i] === nonZero[i + 1]) {\n          nonZero[i] *= 2;\n          this.score += nonZero[i];\n          nonZero[i + 1] = 0;\n        }\n      }\n\n      nonZero = nonZero.filter((cell) => cell !== 0);\n\n      while (nonZero.length < 4) {\n        nonZero.push(0);\n      }\n\n      return nonZero;\n    });\n\n    const hasChanged = JSON.stringify(this.state) !== JSON.stringify(newState);\n\n    if (hasChanged) {\n      this.state = newState;\n      this.addRandomTile();\n      moved = true;\n    }\n\n    this.checkGameStatus();\n\n    return moved;\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    let moved = false;\n\n    const newState = this.state.map((row) => {\n      let nonZero = row.filter((cell) => cell !== 0).reverse();\n\n      for (let i = 0; i < nonZero.length - 1; i++) {\n        if (nonZero[i] === nonZero[i + 1]) {\n          nonZero[i] *= 2;\n          this.score += nonZero[i];\n          nonZero[i + 1] = 0;\n        }\n      }\n\n      nonZero = nonZero.filter((cell) => cell !== 0);\n\n      while (nonZero.length < 4) {\n        nonZero.push(0);\n      }\n\n      return nonZero.reverse();\n    });\n\n    const hasChanged = JSON.stringify(this.state) !== JSON.stringify(newState);\n\n    if (hasChanged) {\n      this.state = newState;\n      this.addRandomTile();\n      moved = true;\n    }\n\n    this.checkGameStatus();\n\n    return moved;\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    let moved = false;\n    const newState = this.getEmptyBoard();\n\n    for (let col = 0; col < 4; col++) {\n      let column = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.state[row][col] !== 0) {\n          column.push(this.state[row][col]);\n        }\n      }\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          this.score += column[i];\n          column[i + 1] = 0;\n        }\n      }\n\n      column = column.filter((cell) => cell !== 0);\n\n      while (column.length < 4) {\n        column.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        newState[row][col] = column[row];\n      }\n    }\n\n    const hasChanged = JSON.stringify(this.state) !== JSON.stringify(newState);\n\n    if (hasChanged) {\n      this.state = newState;\n      this.addRandomTile();\n      moved = true;\n    }\n\n    this.checkGameStatus();\n\n    return moved;\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    let moved = false;\n    const newState = this.getEmptyBoard();\n\n    for (let col = 0; col < 4; col++) {\n      let column = [];\n\n      for (let row = 3; row >= 0; row--) {\n        if (this.state[row][col] !== 0) {\n          column.push(this.state[row][col]);\n        }\n      }\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          this.score += column[i];\n          column[i + 1] = 0;\n        }\n      }\n\n      column = column.filter((cell) => cell !== 0);\n\n      while (column.length < 4) {\n        column.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        newState[3 - row][col] = column[row];\n      }\n    }\n\n    const hasChanged = JSON.stringify(this.state) !== JSON.stringify(newState);\n\n    if (hasChanged) {\n      this.state = newState;\n      this.addRandomTile();\n      moved = true;\n    }\n\n    this.checkGameStatus();\n\n    return moved;\n  }\n\n  checkGameStatus() {\n    if (this.state.some((row) => row.includes(2048))) {\n      this.status = 'win';\n\n      return;\n    }\n\n    if (!this.hasAvailableMoves()) {\n      this.status = 'lose';\n    }\n  }\n\n  hasAvailableMoves() {\n    if (this.state.some((row) => row.includes(0))) {\n      return true;\n    }\n\n    for (let y = 0; y < 4; y++) {\n      for (let x = 0; x < 3; x++) {\n        if (this.state[y][x] === this.state[y][x + 1]) {\n          return true;\n        }\n      }\n    }\n\n    for (let x = 0; x < 4; x++) {\n      for (let y = 0; y < 3; y++) {\n        if (this.state[y][x] === this.state[y + 1][x]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["a","$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","constructor","initialState","state","getEmptyBoard","score","status","Array","fill","map","getScore","getState","row","getStatus","start","addRandomTile","restart","emptyCells","forEach","y","cell","x","push","length","Math","floor","random","moveLeft","moved","newState","nonZero","filter","i","JSON","stringify","checkGameStatus","moveRight","reverse","moveUp","col","column","moveDown","some","includes","hasAvailableMoves","__esModule","default","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$fieldCells","querySelectorAll","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$previousState","$09e991522ca7e64e$var$updateUI","value","prevValue","textContent","className","classList","add","setTimeout","remove","toggle","addEventListener","e","key"],"version":3,"file":"index.97098b02.js.map"}